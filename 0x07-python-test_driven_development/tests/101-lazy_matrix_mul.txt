The 101-lazy_matrix_mul Module:
===============================

This module defines a matrix multiplication function using NumPy.


# Make Sure Documentation Exists:

    >>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

    >>> module_documentation = __import__("101-lazy_matrix_mul").__doc__
    >>> print(len(module_documentation) > 0)
    True

    >>> function_documentation = lazy_matrix_mul.__doc__
    >>> print(len(function_documentation) > 0)
    True


# Correct Usage:

'lazy_matrix_mul(...)': Perform matrix multiplication using NumPy. It returns a new matrix representing the multiplication of ``m_a`` by ``m_b``.

    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

    >>> m_a = [[1, 2]]
    >>> m_b = [[3, 4], [5, 6]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]

    >>> m_a = [[-1, -2]]
    >>> m_b = [[-3, -4], [5, 6]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[-7 -8]]

    >>> m_a = [[1.5, 3.4, 7.1], [-8.1, 10.01, 12.4]]
    >>> m_b = [[1.9, 2.2], [3.3, -5.4], [8.5, 1.2]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 74.42   -6.54 ]
     [123.043 -56.994]]

    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


# On Errors:

If two matrices cannot be multiplied (ie. the row count of 'm_a' is not equal to the column count in 'm_b'), a ValueError is raised.

1- Missing Argument Or Too Many Argument Error:

    >>> print(lazy_matrix_mul())
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

2- m_a And m_b Cannot Be Multiplied:

    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[1, 2], [3, 4], [5, 6]]
    >>> result = lazy_matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

    >>> print(lazy_matrix_mul(m_b, m_b))
    Traceback (most recent call last):
    ValueError: shapes (3,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

    >>> print(lazy_matrix_mul([[]], [[5, 6], [7, 8]]))
    Traceback (most recent call last):
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

3- The parameters 'm_a' and 'm_b' must be lists:

    >>> print(lazy_matrix_mul("not a list", [[1, 2]]))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul([[1, 2]], "also not a list"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul("not a list", "also not a list"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

4- If either parameter is 'None':

    >>> print(lazy_matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

5- If either paremeter is not a list of lists:

    >>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

    >>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
    [11]

    >>> print(lazy_matrix_mul([1, 2], [3, 4]))
    11

6- Input matrices should contain integers or floats:

    >>> print(lazy_matrix_mul([[1, "Two"]], [[3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]]))
    Traceback (most recent call last):
    TypeError: invalid data type for einsum

    >>> print(lazy_matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

7- The length of all rows in matrices 'm_a' & 'm_b' should be equivalent:

    >>> m_a = [[1, 2],[3, 4, 5]]
    >>> m_b = [[1, 2], [3, 4]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[1, 2], [3, 4, 5]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

    >>> m_a = [[1, 2], [3, 4, 5]]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence
